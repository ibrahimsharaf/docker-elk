input {

    # Enabled TCP injection for testing purposes
    tcp {
		port => 5000
    }

    file {
        path => ["/logs/logs/finished/**/*.log"]
        type => "Finished"
        codec => multiline {
            pattern => "^%{TIMESTAMP_ISO8601} "
            negate => true
            what => previous
        }
        sincedb_path => "/dev/null"
        start_position => "beginning"
    }

    file {
        path => ["/logs/logs/running/**/*.log"]
        type => "Running"
        codec => multiline {
            pattern => "^%{TIMESTAMP_ISO8601} "
            negate => true
            what => previous
        }
        sincedb_path => "/dev/null"
        start_position => "beginning"
    }
}


filter {

	grok {
    	match => ["path","%{GREEDYDATA}/%{GREEDYDATA:merchant_name}/%{GREEDYDATA}\.log"]
  	}

	grok{
	    match => [ "message", "%{DATE_EU:timestamp}" ]
	}

	date{
   	 	match => [ "timestamp", "yy-MM-dd" ]
   		target => "@timestamp"	
   	}

	if [type] == "Finished"
	{
		if "Dumping Scrapy stats" in [message] {

			grok{
					match => [ "message", "'item_scraped_count': %{NUMBER:scraped:int}" ]
			}
			grok{
					match => [ "message", "'invalid_items_count': %{NUMBER:invalid:int}" ]
			}
			grok{
					match => [ "message", "'in_stock_items_count': %{NUMBER:instock:int}" ]
			}
			grok{
					match => [ "message", "'out_stock_items_count': %{NUMBER:outofstock:int}" ]
			}
			grok{
					match => [ "message", "'zero_price_items_count': %{NUMBER:zeropriced:int}" ]
			}
			grok{
					match => [ "message", "'iteration_duration': %{NUMBER:duration:float}" ]
			}
		}

		else if " ERROR:" in [message]{
			grok{
				match => [ "message", "%{TIMESTAMP_ISO8601}%{SPACE}%{NOTSPACE}%{SPACE}%{LOGLEVEL}%{NOTSPACE}%{SPACE}%{GREEDYDATA:error_msg}" ]
			}		
		}

		else{
			drop {}
		}		
	}

	if [type] == "Running"
	{
		if "WARNING: Dropped: Item is not valid" in [message]{
			grok{
        		match => [ "message", "'url_en': '%{GREEDYDATA:unfinished_dropped_url}'" ]
    		}
			grok{
				match => [ "message", ".*status\'\:\s\'(?<unfinished_stock_status>\w*)" ]
			}
		}

		else if "DEBUG: Scraped from" in [message]{
			grok{
        		match => [ "message", "'url_en': '%{GREEDYDATA:unfinished_scraped_url}'" ]
    		}
			grok{
				match => [ "message", ".*status\'\:\s\'(?<unfinished_stock_status>\w*)" ]
			}
		}

		else if " ERROR:" in [message]{
			grok{
				match => [ "message", "%{TIMESTAMP_ISO8601}%{SPACE}%{NOTSPACE}%{SPACE}%{LOGLEVEL}%{NOTSPACE}%{SPACE}%{GREEDYDATA:error_msg}" ]
			}		
		}

		else if "WARNING: Item at url" in [message]{
			grok{
				match => [ "message", "%{TIMESTAMP_ISO8601} %{NOTSPACE} WARNING: Item at url %{GREEDYDATA:unfinished_invalid_items} is not valid because it is missing" ]
			}
		}

		else{
			drop {}
		}
	}
}


output {
	if "_grokparsefailure" not in [tags]{

		stdout {
			codec => rubydebug
		}

		elasticsearch {
			hosts => "elasticsearch:9200"
			index => "logstash-%{merchant_name}"
		}
	}
}
